<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoGame.QuakeConsole.PythonInterpreter</name>
    </assembly>
    <members>
        <member name="T:QuakeConsole.PythonInterpreter">
            <summary>
            Runs <see cref="T:QuakeConsole.Console"/> commands through an IronPython parser. Supports loading .NET types
            and provides autocomplete for them.
            </summary>
        </member>
        <member name="M:QuakeConsole.PythonInterpreter.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:QuakeConsole.PythonInterpreter"/>.
            </summary>
        </member>
        <member name="P:QuakeConsole.PythonInterpreter.EchoEnabled">
            <summary>
            Gets or sets if the user entered command should be shown in the output.
            </summary>
        </member>
        <member name="M:QuakeConsole.PythonInterpreter.Execute(QuakeConsole.IConsoleOutput,System.String)">
            <summary>
            Executes a command by running it through the IronPython parser.
            </summary>
            <param name="output">Console output buffer to append any output messages.</param>
            <param name="command">Command to execute.</param>
        </member>
        <member name="M:QuakeConsole.PythonInterpreter.Autocomplete(QuakeConsole.IConsoleInput,System.Boolean)">
            <summary>
            Tries to autocomplete the current input value in the <see cref="T:QuakeConsole.Console"/> <see cref="T:QuakeConsole.ConsoleInput"/>.
            </summary>
            <param name="input">Console input.</param>
            <param name="forward">True if user wants to autocomplete to the next value; false if to the previous value.</param>
        </member>
        <member name="M:QuakeConsole.PythonInterpreter.AddSearchPath(System.String)">
            <summary>
            Adds a search path for the IronPython engine to look for when importing modules.
            </summary>
            <param name="path">Path to add.</param>
        </member>
        <member name="M:QuakeConsole.PythonInterpreter.AddVariable``1(System.String,``0,System.Int32)">
            <summary>
            Adds a variable to the IronPython environment.
            </summary>
            <typeparam name="T">Type of variable to add.</typeparam>
            <param name="name">Name of the variable.</param>
            <param name="obj">Object to add.</param>
            <param name="recursionLevel">
            Determines if subtypes of passed type will also be automatically added to IronPython environment
            and if then how many levels deep this applies.
            </param>
        </member>
        <member name="M:QuakeConsole.PythonInterpreter.RemoveVariable(System.String)">
            <summary>
            Removes a variable from the IronPython environment.
            </summary>
            <param name="name">Name of the variable.</param>
            <returns>True if variable was removed; otherwise false.</returns>
        </member>
        <member name="M:QuakeConsole.PythonInterpreter.AddType(System.Type,System.Int32)">
            <summary>
            Loads type to IronPython.
            </summary>
            <param name="type">Type to load.</param>
            <param name="recursionLevel">
            Determines if subtypes of passed type will also be automatically added to IronPython environment
            and if then how many levels deep this applies.
            </param>        
        </member>
        <member name="M:QuakeConsole.PythonInterpreter.AddTypes(System.Collections.Generic.IEnumerable{System.Type},System.Int32)">
            <summary>
            Loads types to IronPython.
            </summary>
            <param name="types">Types to load.</param>
            <param name="recursionLevel">
            Determines if subtypes of passed types will also be automatically added to IronPython environment
            and if then how many levels deep this applies.
            </param>
        </member>
        <member name="M:QuakeConsole.PythonInterpreter.AddAssembly(System.Reflection.Assembly,System.Int32)">
            <summary>
            Loads all the public non-nested types from the assembly to IronPython.
            </summary>
            <param name="assembly">Assembly to get types from.</param>
            <param name="recursionLevel">
            Determines if subtypes of types in assembly will also be automatically added to IronPython environment
            and if then how many levels deep this applies.
            </param>
        </member>
        <member name="M:QuakeConsole.PythonInterpreter.RunScript(System.String)">
            <summary>
            Runs a script straight on IronPython engine.
            </summary>
            <param name="script">Script to run.</param>
            <returns>Value returned by the IronPython engine.</returns>
        </member>
        <member name="M:QuakeConsole.PythonInterpreter.Reset">
            <summary>
            Resets the IronPython engine scope, clears any imported modules and .NET types.
            </summary>
        </member>
        <member name="M:QuakeConsole.Utilities.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> extension method that searches for the first match and returns its index.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">Input enumerable to work on.</param>
            <param name="predicate">The predicate.</param>
            <returns>The index of the first element matching.</returns>
        </member>
        <member name="M:QuakeConsole.Utilities.LastIndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            An <see cref="T:System.Collections.Generic.IList`1"/> extension method that searches for the last match and returns its index.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">Input list to work on.</param>
            <param name="predicate">The predicate.</param>
            <returns>The index of the last element matching.</returns>
        </member>
        <member name="M:QuakeConsole.Utilities.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Execute an action for each item of the given enumerable.
            </summary>
            <typeparam name="T">Type of the item value in the enumerable.</typeparam>
            <param name="source">Input enumerable to work on.</param>
            <param name="action">Action performed for each item in the enumerable.</param>
            <remarks>This extension method do not yield. It acts just like a foreach statement.</remarks>
        </member>
        <member name="M:QuakeConsole.Utilities.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns all distinct elements of the given source, where "distinctness"
            is determined via a projection and the default equality comparer for the projected type.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results, although
            a set of already-seen keys is retained. If a key is seen multiple times,
            only the first element with that key is returned.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="keySelector">Projection for determining "distinctness"</param>
            <returns>A sequence consisting of distinct elements from the source sequence,
            comparing them by the specified key projection.</returns>
        </member>
    </members>
</doc>
